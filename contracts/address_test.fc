{-
    address_test.fc 

    Tests for address.fc
-}

_ test_address::is_none() impure inline {
    assert("is_none #0", address::is_none(addr_none()));
    assert("is_none #1", ~ address::is_none("EQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAM9c"a));
}

_ test_address::get_workchain() impure inline {
    assert("get_workchain #0", address::get_workchain("EQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAM9c"a) == 0);
    assert("get_workchain #1", address::get_workchain("Ef8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAU"a) == -1);
}

_ test_address::get_hashpart() impure inline {
    assert("get_hashpart #0", address::get_hashpart("EQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAM9c"a) == 0);
    assert("get_hashpart #1", address::get_hashpart("Ef8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAU"a) == 0);

}

_ test_address::serialize() impure inline {
    assert("serialize #0", equal_slices(address::serialize(0, 0), "EQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAM9c"a));
}

_ test_address::check_workchain() impure inline {
    slice my_addr = "EQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAM9c"a;
    slice my_addr2 = "Ef8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAU"a;

    assert("check_workchain #0", my_addr.address::check_workchain(0));
    assert("check_workchain #1", ~ my_addr2.address::check_workchain(0));
    assert("check_workchain #2", my_addr2.address::check_workchain(-1));
    assert("check_workchain #3", ~ my_addr.address::check_workchain(-1));
}

_ test_address::check_hashpart() impure inline {
    slice my_addr = "EQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAM9c"a;
    slice my_addr2 = "Ef8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAU"a;

    assert("check_hashpart #0", my_addr.address::check_hashpart(0));
    assert("check_hashpart #1", my_addr2.address::check_hashpart(0));
    assert("check_hashpart #2", ~ my_addr.address::check_hashpart(-1));
    assert("check_hashpart #3", ~ my_addr2.address::check_hashpart(100));
}

_ test_address::is_type() impure inline {
    slice my_addr = "EQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAM9c"a;
    slice my_addr1 = address::serialize_var(0, 128, 0);
    slice my_addr2 = addr_none();

    assert("is_type #0", my_addr.address::is_type(ADDR_TYPE_STD));
    assert("is_type #1", my_addr1.address::is_type(ADDR_TYPE_VAR));
    assert("is_type #2", my_addr2.address::is_type(ADDR_TYPE_NONE));
}

_ test_address::is_hole() impure inline {
    slice hole_addr = "0:0000000000000000000000000000000000000000000000000000000000000000"a;
    slice not_hole_addr = "-1:0000000000000000000000000000000000000000000000000000000000000000"a;

    assert("is_hole #0", hole_addr.address::is_hole());
    assert("is_hole #1", ~ not_hole_addr.address::is_hole());
}

_ test_address::serialize_none() impure inline {
    assert("serialize_none #0", equal_slices(address::serialize_none(), addr_none()));
    assert("serialize_none #1", ~ equal_slices(address::serialize_none(), "0:0000000000000000000000000000000000000000000000000000000000000000"a));
}


_ test_address() impure inline {
    test_address::get_hashpart();
    test_address::get_workchain();
    test_address::is_none();
    test_address::serialize();
    test_address::check_workchain();
    test_address::check_hashpart();
    test_address::is_type();
    test_address::is_hole();
    test_address::serialize_none();
}
{-
    dict.fc

    This library simply the creation and manipulation of dictionaries.
-}

_ dict::set([int, cell] cntr, slice _data, int _index) inline {
    [int _key_len, cell _cell?] = cntr; 
    _cell?~udict_set(_key_len, _index, _data);
    return [_key_len, _cell?];
}

_ dict::iset([int, cell] cntr, slice _data, int _index) inline {
    [int _key_len, cell _cell?] = cntr; 
    _cell?~idict_set(_key_len, _index, _data);
    return [_key_len, _cell?];
}

_ dict::set_b([int, cell] cntr, builder _data, int _index) inline {
    [int _key_len, cell _cell?] = cntr; 
    _cell?~udict_set_builder(_key_len, _index, _data);
    return [_key_len, _cell?];
}

_ dict::iset_b([int, cell] cntr, builder _data, int _index) inline {
    [int _key_len, cell _cell?] = cntr; 
    _cell?~idict_set_builder(_key_len, _index, _data);
    return [_key_len, _cell?];
}

_ dict::iset_ref([int, cell] cntr, cell _data, int _index) inline {
    [int _key_len, cell _cell?] = cntr; 
    _cell?~idict_set_ref(_key_len, _index, _data);
    return [_key_len, _cell?];
}

_ dict::set_ref([int, cell] cntr, cell _data, int _index) inline {
    [int _key_len, cell _cell?] = cntr; 
    _cell?~udict_set_ref(_key_len, _index, _data);
    return [_key_len, _cell?];
}

_ dict::get([int, cell] cntr, int _index) inline {
    [int _key_len, cell _cell?] = cntr; 
    (slice _data, int _found) = _cell?.udict_get?(_key_len, _index);
    return (_data, _found);
}

_ dict::iget([int, cell] cntr, int _index) inline {
    [int _key_len, cell _cell?] = cntr; 
    (slice _data, int _found) = _cell?.idict_get?(_key_len, _index);
    return (_data, _found);
}

_ dict::get_ref([int, cell] cntr, int _index) inline {
    [int _key_len, cell _cell?] = cntr; 
    (cell _data, int _found) = _cell?.udict_get_ref?(_key_len, _index);
    return (_data, _found);
}

_ dict::iget_ref([int, cell] cntr, int _index) inline {
    [int _key_len, cell _cell?] = cntr; 
    (cell _data, int _found) = _cell?.idict_get_ref?(_key_len, _index);
    return (_data, _found);
}

_ dict::delete([int, cell] cntr, int _index) inline {
    [int _key_len, cell _cell?] = cntr; 
    int _deleted = _cell?~udict_delete?(_key_len, _index);
    return ([_key_len, _cell?], _deleted);
}

_ dict::idelete([int, cell] cntr, int _index) inline {
    [int _key_len, cell _cell?] = cntr; 
    int _deleted = _cell?~idict_delete?(_key_len, _index);
    return ([_key_len, _cell?], _deleted);
}

_ dict::get_key_len([int, cell] cntr) inline {
    [int _key_len, _] = cntr; 
    return _key_len;
}

_ dict::get_cell([int, cell] cntr) inline {
    [int _key_len, cell _cell?] = cntr; 
    return _cell?;
}

_ dict::from_cell(cell _cell, int _key_len) inline {
    return [_key_len, _cell];
}

_ ~dict::idelete([int, cell] cntr, int _index) inline {
    [int _key_len, cell _cell?] = cntr; 
    int _deleted = _cell?~idict_delete?(_key_len, _index);
    return ([_key_len, _cell?], _deleted);
}

_ ~dict::delete([int, cell] cntr, int _index) inline {
    [int _key_len, cell _cell?] = cntr; 
    int _deleted = _cell?~udict_delete?(_key_len, _index);
    return ([_key_len, _cell?], _deleted);
}

_ ~dict::set_ref([int, cell] cntr, cell _data, int _index) inline {
    [int _key_len, cell _cell?] = cntr; 
    _cell?~udict_set_ref(_key_len, _index, _data);
    return ([_key_len, _cell?], ());
}

_ ~dict::iset_ref([int, cell] cntr, cell _data, int _index) inline {
    [int _key_len, cell _cell?] = cntr; 
    _cell?~idict_set_ref(_key_len, _index, _data);
    return ([_key_len, _cell?], ());
}

_ ~dict::iset([int, cell] cntr, slice _data, int _index) inline {
    [int _key_len, cell _cell?] = cntr; 
    _cell?~idict_set(_key_len, _index, _data);
    return ([_key_len, _cell?], ());
}

_ ~dict::set([int, cell] cntr, slice _data, int _index) inline {
    [int _key_len, cell _cell?] = cntr; 
    _cell?~udict_set(_key_len, _index, _data);
    return ([_key_len, _cell?], ());
}

_ ~dict::iset_b([int, cell] cntr, builder _data, int _index) inline {
    [int _key_len, cell _cell?] = cntr; 
    _cell?~idict_set_builder(_key_len, _index, _data);
    return ([_key_len, _cell?], ());
}

_ ~dict::set_b([int, cell] cntr, builder _data, int _index) inline {
    [int _key_len, cell _cell?] = cntr; 
    _cell?~udict_set_builder(_key_len, _index, _data);
    return ([_key_len, _cell?], ());
}

_ dict::replace([int, cell] cntr, slice _data, int _index) inline {
    [int _key_len, cell _cell?] = cntr; 
    int replaced? = _cell?~udict_replace?(_key_len, _index, _data);
    return ([_key_len, _cell?], replaced?);
}

_ ~dict::replace([int, cell] cntr, slice _data, int _index) inline {
    [int _key_len, cell _cell?] = cntr; 
    int replaced? = _cell?~udict_replace?(_key_len, _index, _data);
    return ([_key_len, _cell?], replaced?);
}

_ dict::ireplace([int, cell] cntr, slice _data, int _index) inline {
    [int _key_len, cell _cell?] = cntr; 
    int replaced? = _cell?~idict_replace?(_key_len, _index, _data);
    return ([_key_len, _cell?], replaced?);
}

_ ~dict::ireplace([int, cell] cntr, slice _data, int _index) inline {
    [int _key_len, cell _cell?] = cntr; 
    int replaced? = _cell?~idict_replace?(_key_len, _index, _data);
    return ([_key_len, _cell?], replaced?);
}


_ dict::add([int, cell] cntr, slice _data, int _index) inline {
    [int _key_len, cell _cell?] = cntr; 
    int added? = _cell?~udict_add?(_key_len, _index, _data);
    return ([_key_len, _cell?], added?);
}

_ ~dict::add([int, cell] cntr, slice _data, int _index) inline {
    [int _key_len, cell _cell?] = cntr; 
    int added? = _cell?~udict_add?(_key_len, _index, _data);
    return ([_key_len, _cell?], added?);
}

_ dict::iadd([int, cell] cntr, slice _data, int _index) inline {
    [int _key_len, cell _cell?] = cntr; 
    int added? = _cell?~idict_add?(_key_len, _index, _data);
    return ([_key_len, _cell?], added?);
}

_ ~dict::iadd([int, cell] cntr, slice _data, int _index) inline {
    [int _key_len, cell _cell?] = cntr; 
    int added? = _cell?~idict_add?(_key_len, _index, _data);
    return ([_key_len, _cell?], added?);
}

int dict::equal_raw(cell _a, cell _b) inline {
    if (is_null(_a)) { return is_null(_b); }
    elseif (is_null(_b)) { return false; }

    return equal_cells(_a, _b);
}

int dict::equal([int, cell] cntr_a, [int, cell] cntr_b) inline {
    [int _key_len_a, cell _cell_a?] = cntr_a;
    [int _key_len_b, cell _cell_b?] = cntr_b;

    return (_key_len_a == _key_len_b) & dict::equal_raw(_cell_a?, _cell_b?);
}

[int, cell] dict::new(int _key_len) inline {
    return [_key_len, new_dict()];
}

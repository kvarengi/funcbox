{-
    math/int/int_test.fc 

    Tests for math/int/int.fc
-}

_ test_math::int::sqrt() impure inline {
    assert("int::sqrt #0", math::int::sqrt(10000) == 100);
    assert("int::sqrt #1", math::int::sqrt(1000) == 31);
    assert("int::sqrt #2", math::int::sqrt(0) == 0);
    try {
        assert("int::sqrt #3", math::int::sqrt(-100) + 1 );
    } catch(_, _exit_code) {
        _exit_code.to_int();
        assert("int::sqrt #4", _exit_code == math::error::invalid_input);
    }

    ;; perfect square roots
    assert("int::sqrt #5", math::int::sqrt(8321610476513149929) == 2884720173);
    assert("int::sqrt #6", math::int::sqrt(4759530640550871025) == 2181634855);
    assert("int::sqrt #7", math::int::sqrt(15184595268627190884) == 3896741622);
    assert("int::sqrt #8", math::int::sqrt(4864811209278680209) == 2205631703);
    assert("int::sqrt #9", math::int::sqrt(16461382645442702500) == 4057262950);
    assert("int::sqrt #10", math::int::sqrt(4420023981015518466042898683658592656) == 2102385307458059284);
    assert("int::sqrt #11", math::int::sqrt(156080545413578830761247491975961681284) == 12493219977795109278);
    assert("int::sqrt #12", math::int::sqrt(48196676570300751657399889577341363009) == 6942382629205966753);
    assert("int::sqrt #13", math::int::sqrt(234388710208954473795664224037547823001) == 15309758659396119749);
    assert("int::sqrt #14", math::int::sqrt(2249809013428248226982863430909120356) == 1499936336458400566);
    assert("int::sqrt #15", math::int::sqrt(28783180247992693762539467111067676109913303282854356485612372867783931875856) == 169656064577699944249567883188407093316);
    assert("int::sqrt #16", math::int::sqrt(4925144492634095860445402841289483741118435219150410339073323676723202566544) == 70179373697932755635585911063974641388);
    assert("int::sqrt #17", math::int::sqrt(51900175674088978132493691058807660080305340143408729024866155479202296511969) == 227816100559396324095552166083063539313);
    assert("int::sqrt #18", math::int::sqrt(22464270520799832232629345337649808475999030753724825411023467003608909732521) == 149880854417099691928153786510613995789);
    assert("int::sqrt #19", math::int::sqrt(658176547112441718056764836509386181053739269519881445542305711015686813009) == 25654951707466566931814087468387760503);

    ;; random big numbers
    assert("int::sqrt #20", math::int::sqrt(36173077982740374011060088760109508742) == 6014405871134768537);
    assert("int::sqrt #21", math::int::sqrt(66923984456630932827254110016638576899) == 8180708065725786112);
    assert("int::sqrt #22", math::int::sqrt(94147045759169724595491757361933743954) == 9702940057486170237);
    assert("int::sqrt #23", math::int::sqrt(266294509184280538899789350807229264671) == 16318532690909453789);
    assert("int::sqrt #24", math::int::sqrt(316504065298474043773122746820048758713) == 17790561129387516982);
    assert("int::sqrt #25", math::int::sqrt(245307449052814253944459582388415262793) == 15662293863058956599);
    assert("int::sqrt #26", math::int::sqrt(196532271018189154145736868208452326508) == 14018996790718983331);
    assert("int::sqrt #27", math::int::sqrt(108389402815912502785706771914544927476) == 10411023139726109685);
    assert("int::sqrt #28", math::int::sqrt(105723691845309320629350093466974059498) == 10282202674782739402);
    assert("int::sqrt #29", math::int::sqrt(229210416804415462543873912664790292944) == 15139696721018405609);
    assert("int::sqrt #30", math::int::sqrt(30191971578005269949870736252824487902) == 5494722156579463477);
    assert("int::sqrt #31", math::int::sqrt(320221614723388236428639406411759677302) == 17894737067735536762);
    assert("int::sqrt #32", math::int::sqrt(59344788980938726880707348719003224538) == 7703556904504485250);
    assert("int::sqrt #33", math::int::sqrt(17688821402317920860022972895349593789) == 4205808055810193635);
    assert("int::sqrt #34", math::int::sqrt(49744777878405021248827895907980858090) == 7052997793733174084);

    assert("int::sqrt #35", math::int::sqrt(2301968327) == 47978);
    assert("int::sqrt #36", math::int::sqrt(3884368103) == 62324);
    assert("int::sqrt #37", math::int::sqrt(1963189486) == 44307);
    assert("int::sqrt #38", math::int::sqrt(3536925696) == 59472);
    assert("int::sqrt #39", math::int::sqrt(1639840957) == 40494);
    assert("int::sqrt #40", math::int::sqrt(800302170) == 28289);
    assert("int::sqrt #41", math::int::sqrt(839298172) == 28970);
    assert("int::sqrt #42", math::int::sqrt(2761200719) == 52547);
    assert("int::sqrt #43", math::int::sqrt(4149192701) == 64414);
    assert("int::sqrt #44", math::int::sqrt(239298662) == 15469);
    assert("int::sqrt #45", math::int::sqrt(289588844) == 17017);
    assert("int::sqrt #46", math::int::sqrt(507621568) == 22530);
    assert("int::sqrt #47", math::int::sqrt(2605746039) == 51046);
    assert("int::sqrt #48", math::int::sqrt(4214948693) == 64922);
    assert("int::sqrt #49", math::int::sqrt(549247822) == 23436);

    assert("int::sqrt #50", math::int::sqrt(25580201935705950924816398226185543036208644156115482764023931212835963621422) == 159938119082681321011347511789869329107);
    assert("int::sqrt #51", math::int::sqrt(41592243802822091904230019390151519596979966300107449210971077526749539592584) == 203941765714681630791662968100527761110);
    assert("int::sqrt #52", math::int::sqrt(47830034480542504819797738235868247906255558996299334679221061894082212632818) == 218700787562693758169177216434332622019);
    assert("int::sqrt #53", math::int::sqrt(96694296464558463517249284688026958484024409296520580117237311673433815530233) == 310957065307348280417404761671022472480);
    assert("int::sqrt #54", math::int::sqrt(84764383481835931603451235337789147498153633180387126376492966368133159006820) == 291143235335866822546374317868645396602);
    assert("int::sqrt #55", math::int::sqrt(1029540682023023701154624455569454522763093413325588370823860898451774599818) == 32086456364376289615539715909756102594);
    assert("int::sqrt #56", math::int::sqrt(59257721684568438008718509599520706233840381371076644486224770399098142484231) == 243429089643305444475611981416805976408);
    assert("int::sqrt #57", math::int::sqrt(56530787011697100689009543046070975015861542686826833020736578784229397878200) == 237762038626222038643644830641694733909);
    assert("int::sqrt #58", math::int::sqrt(89789663655863957156727985750679967319978077455848186150191742868788542739872) == 299649234365556083856194231596806048246);
    assert("int::sqrt #59", math::int::sqrt(14126976704980962922391045937181189524419467636776343506485406935960311438329) == 118856959009478965057069965750293325716);
    assert("int::sqrt #60", math::int::sqrt(110572407570733987139989258379980128167375932047385584102166385751510601332939) == 332524296211170090102824323287861625832);
    assert("int::sqrt #61", math::int::sqrt(113586851221117426531765476820024389391058739543323699581274113290810166380771) == 337026484450580569699001202276061944431);
    assert("int::sqrt #62", math::int::sqrt(96056374524015207179878631049304337757946874156727318692923344464560763600030) == 309929628341685343911569752868765164607);
    assert("int::sqrt #63", math::int::sqrt(47161207546162724776967927602401233909341026871940525194373869786154108189213) == 217166313101647339213784382003020619876);
    assert("int::sqrt #64", math::int::sqrt(64066736621830942482235767060609628058532294108761110727101129886611332220496) == 253114078276635854299871007523315568912);

}

_ test_math::int::pow() impure inline {
    assert("int::pow #0", math::int::pow(10000, 3) == 1000000000000);
    assert("int::pow #1", math::int::pow(143, 20) == 12785589283244544365936086134520496196408001);
}

_ test::int() impure inline {
    test_math::int::sqrt(); 
    test_math::int::pow();
}   
{-
    utils.fc

    Various utility functions.
-}

slice utils::address_to_hex_string(int value) inline {
    if value == 0 {
        builder buffer = begin_cell();
        int i = 0;
        while (i < 64){
            buffer = buffer.store_uint("0"u, 8);
            i += 1;
        }
        return buffer.end_cell().begin_parse().preload_bits(i * 8);
    } else {
        int i = 0;
    
        int mask = 15;
        builder buffer = begin_cell();

        while (i < 64) {
            int curr = (value & mask);
            if(curr > 9){
                buffer = buffer.store_uint(55 + curr, 8);
            } else {
                buffer = buffer.store_uint(48 + curr, 8);
            }
            value = value >> 4;
            i += 1;
        }

        builder final_cell = begin_cell();

        slice reversed_buffer = buffer.end_cell().begin_parse();
    
        i = 64;
        while(i > 0){
            i -= 1;
            slice chr = reversed_buffer.preload_bits_offset(i * 8, 8);
            final_cell = final_cell.store_slice(chr);
        }
        return final_cell.end_cell().begin_parse().preload_bits(512);
    }
}

slice utils::number_to_slice(int number) inline {
    builder text_b = begin_cell();
    if number < 0 {
        text_b = text_b.store_slice("-");
        number = - number;
    }
    int len = 0;
    int value = 0;
    int mult = 1;
    do {
        (number, int res) = number.divmod(10);
        value = value + (res + 48) * mult;
        mult = mult * 256;
        len = len + 1;
    } until (number == 0);
    slice text = text_b.store_uint(value, len * 8).end_cell().begin_parse();
    return text;
}

() utils::send_custom(
    int _amount, 
    int _op, 
    slice _to, 
    int _mode
) impure inline {
    cell msg = begin_cell()
        .store_uint(0x10, 6)
        .store_slice(_to)
        .store_coins(_amount)
        .store_uint(0, 107)
        .store_uint(_op, 32)
        .store_uint(ctx.at(QUERY_ID), 64)
    .end_cell();
    send_raw_message(msg, _mode);
}

() utils::send_excesses(
    int _amount, 
    slice _to, 
    int _mode
) impure inline {
    utils::send_custom(_amount, op::excesses, _to, _mode);
}

(int) utils::to_coins(int _n) inline { return _n * 1000000000; }

(cell) utils::merge_dicts(cell _first_dict, cell _second_dict, int _key_size) inline {
    (int key, slice value, int is_found) = _second_dict.udict_get_min?(_key_size);
    
    if is_found {
        _first_dict~udict_set(_key_size, key, value);
    }

    while (is_found) {
        (key, value, is_found) = _second_dict.udict_get_next?(_key_size, key);
        if is_found {
            _first_dict~udict_set(_key_size, key, value);
        }
    }

    return _first_dict;
}

(cell) utils::merge_idicts(cell _first_dict, cell _second_dict, int _key_size) inline {
    (int key, slice value, int is_found) = _second_dict.idict_get_min?(_key_size);
    
    if is_found {
        _first_dict~udict_set(_key_size, key, value);
    }

    while (is_found) {
        (key, value, is_found) = _second_dict.idict_get_next?(_key_size, key);
        if is_found {
            _first_dict~idict_set(_key_size, key, value);
        }
    }

    return _first_dict;
}

tuple utils::make_c7() inline {
    return _unsafe_tuple([_unsafe_tuple([
                    0x076ef1ea,                     ;; magic
                    0,                              ;; actions
                    0,                              ;; msgs_sent
                    now(),                          ;; unixtime
                    1,                              ;; block_lt
                    1,                              ;; trans_lt
                    get_seed(),                     ;; randseed
                    pair(1000000000, null()),       ;; balance_remaining
                    my_address(),                   ;; myself
                    get_config()                   ;; global_config
                ])]);
}

int utils::calc_account_hash(cell code, cell data) inline {
    return begin_cell()
        .store_uint(
            ;; refs_descriptor: ref_count + ((exotic? & 1) * 8) + (mask * 32)
            ;;                  2 refs (code + data), non-exotic, zero-mask
            (2 << 16)
            ;; bits_descriptor: floor (bit_count / 8) + ceil(bit_count, 8)
            ;;                  floor (5 bits / 8) + ceil(5 bits / 8) = 0 + 1 = 1
            | (1 << 8)
            ;; data: [0b00110] + [0b100] = [0b00110100] = 0x34 (data + augmented bits)
            ;;       0b00110 - data (split_depth, special, code, data, library)
            ;;       0b100 - augmented bits (leading 1 + zeroes to make section multiple of eight)
            | 0x34,
            24
        )
        .store_uint(code.cell_depth(), 16)
        .store_uint(data.cell_depth(), 16)
        .store_uint(code.cell_hash(), 256)
        .store_uint(data.cell_hash(), 256)
        .sha256_singleb();
}

;; 0b100 = addr_std$10 tag; No anycast
;; 8 zero bits for basechain workchain
const slice basechain_address_slice_magic = "801_"s;

slice utils::basechain_address_from_account_hash(int ac_hash) inline {
    return begin_cell().store_slice(basechain_address_slice_magic).store_uint(ac_hash, 256).end_cell().begin_parse();
}

slice utils::basechain_address_from_code_and_data(cell code, cell data) inline {
    return utils::basechain_address_from_account_hash(utils::calc_account_hash(code, data));
}
